scalar Date
scalar ObjectId

type Query {
  users: [User!]!
  user(username: String): User!
  me(username: String, email: String, userId: ObjectId): User!
  forgotPassword(email: String): Boolean
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createSocialUser(createSocialUserInput: CreateSocialUserInput!): LoginResult!
  # createSocialUser(createSocialUserInput: CreateSocialUserInput!): User!
  resendConfirmEmail(email: String): User!
  confirmEmail(token: String): User!
  updateUser(fieldsToUpdate: UpdateUserInput!): User!
  addAdminPermission(username: String!): User!
  removeAdminPermission(username: String!): User!
  resetPassword(username: String!, code: String!, password: String!): User!
}

type User {
  username: String!
  normalizedUsername: String
  email: String!
  name: String
  avatar: String
  explicit: Boolean
  normalizedEmail: String
  permissions: [String!]!
  postTag: String!
  saveTag: String!
  createdAt: Date!
  updatedAt: Date!
  lastSeenAt: Date!
  enabled: Boolean!
  isVerified: Boolean!
  facebook: String
  twitter: String
  _id: ObjectId!
  posts: [Post]
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input CreateSocialUserInput {
  username: String!
  email: String
  facebook: String
  twitter: String
  tokens: [SocialToken]!
  name: String
  avatar: String
}

input UpdateUserInput {
  username: String
  email: String
  name: String
  password: UpdatePasswordInput
  enabled: Boolean
  avatar: String
  token: SocialToken
  facebook: String
  twitter: String
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input SocialToken {
  kind: String!
  accessToken: String
  tokenSecret: String
  refreshToken: String
}
