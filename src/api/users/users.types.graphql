scalar Date
scalar ObjectId

type Query {
  users: [User!]!
  user(username: String, email: String, userId: ObjectId): User!
  forgotPassword(email: String): Boolean
}

type Mutation {
  createUser(createUserInput: CreateUserInput): User!
  resendConfirmEmail(email: String): User!
  confirmEmail(token: String): User!
  updateUser(fieldsToUpdate: UpdateUserInput!, username: String): User!
  addAdminPermission(username: String!): User!
  removeAdminPermission(username: String!): User!
  resetPassword(username: String!, code: String!, password: String!): User!
}

type User {
  username: String!
  normalizedUsername: String
  email: String!
  name: String
  avatar: String
  explicit: Boolean
  normalizedEmail: String
  permissions: [String!]!
  postTag: String!
  saveTag: String!
  createdAt: Date!
  updatedAt: Date!
  lastSeenAt: Date!
  enabled: Boolean!
  isVerified: Boolean!
  _id: ObjectId!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  password: UpdatePasswordInput
  enabled: Boolean
  avatar: String
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}
